extends layout

block content
  .container-fluid
    #app
      // 房間管理區域
      .row.justify-content-center.mb-4(v-if="!currentRoomId")
        .col-lg-8.col-xl-6
          .card.shadow-lg.border-0
            .card-header.bg-gradient-primary.text-primary.text-center.py-4
              h4.mb-0
                i.fas.fa-gem.me-2.text-primary
                | 珠子分配系統
              p.mb-0.text-primary 多人即時協作的珠子分配管理工具
            
            .card-body.p-4
              // 名稱輸入區域
              .mb-4
                label.form-label.fw-bold
                  i.fas.fa-user.me-2.text-primary
                  | 請輸入你的遊戲名稱
                .input-group
                  span.input-group-text
                    i.fas.fa-id-card
                  input.form-control.form-control-lg(v-model="playerName" type="text" placeholder="輸入你的遊戲名稱" maxlength="20" required)
              
              .row.g-3
                .col-md-6
                  .card.border-success.h-100
                    .card-body.text-center.p-4
                      .mb-3
                        .bg-success.bg-opacity-10.rounded-circle.d-inline-flex.align-items-center.justify-content-center(style="width: 60px; height: 60px;")
                          i.fas.fa-crown.text-success.fa-2x
                      h5.text-success 創建新房間
                      p.text-muted.small 成為隊長，管理珠子分配
                      button.btn.btn-success.btn-lg.w-100(:disabled="!playerName.trim()" @click="createRoom")
                        i.fas.fa-plus.me-2
                        | 創建房間
                
                .col-md-6
                  .card.border-primary.h-100
                    .card-body.text-center.p-4
                      .mb-3
                        .bg-primary.bg-opacity-10.rounded-circle.d-inline-flex.align-items-center.justify-content-center(style="width: 60px; height: 60px;")
                          i.fas.fa-users.text-primary.fa-2x
                      h5.text-primary 加入現有房間
                      p.text-muted.small 輸入房間序號加入遊戲
                      .input-group.mb-3
                        span.input-group-text
                          i.fas.fa-key
                        input.form-control.form-control-lg.text-center.fw-bold(v-model="joinRoomId" type="text" placeholder="房間序號" maxlength="8" style="letter-spacing: 2px;")
                      button.btn.btn-primary.btn-lg.w-100(:disabled="!playerName.trim() || !joinRoomId.trim()" @click="joinRoom")
                        i.fas.fa-sign-in-alt.me-2
                        | 加入房間
            
            // Footer 製作人資訊
            .card-footer.bg-light.text-center.py-3
              .small.text-muted
                i.fas.fa-code.me-1
                | 製作人：娜歐--小不點寶寶

      // 房間資訊
      .card.mb-4(v-if="currentRoomId")
        .card-header.bg-primary.text-white
          .row.align-items-center
            .col-md-8
              .d-flex.align-items-center.flex-wrap
                i.fas.fa-home.me-2.text-white
                strong.me-3.text-white 房間序號: {{ currentRoomId }}
                .d-flex.align-items-center
                  i.fas.fa-user.me-1.text-white
                  span.me-2.text-white {{ playerName }}
                  span.badge(:class="isCaptain ? 'bg-warning text-dark' : 'bg-light text-dark'")
                    i.fas.fa-crown.me-1(v-if="isCaptain")
                    i.fas.fa-user.me-1(v-else)
                    | {{ isCaptain ? '隊長' : '隊員' }}
            .col-md-4.text-end
              button.btn.btn-light.btn-sm.me-2(@click="copyRoomId")
                i.fas.fa-copy.me-1
                | 複製房間號
              button.btn.btn-danger.btn-sm(@click="leaveRoom")
                i.fas.fa-sign-out-alt.me-1
                | 離開房間
        
        .card-body.p-0
          // 房間成員抽屜標題
          .d-flex.align-items-center.justify-content-between.p-3.border-bottom.bg-light.cursor-pointer(@click="toggleMembersDrawer")
            .d-flex.align-items-center
              i.fas.fa-users.me-2.text-primary
              h6.mb-0 房間成員 ({{ roomMembers.length }} 人)
            .d-flex.align-items-center
              // 成員頭像預覽（收起時顯示）
              .d-flex.me-2(v-if="!showMembersDrawer && roomMembers.length > 0")
                .position-relative(v-for="(member, index) in roomMembers.slice(0, 5)" :key="member.id" :style="{ marginLeft: index > 0 ? '-8px' : '0', zIndex: 5 - index }")
                  .rounded-circle.border.border-2.border-white.d-inline-flex.align-items-center.justify-content-center(:class="member.isCaptain ? 'bg-warning text-dark' : 'bg-primary text-white'" style="width: 24px; height: 24px; font-size: 10px;")
                    i.fas.fa-crown(v-if="member.isCaptain")
                    i.fas.fa-user(v-else)
                .badge.bg-secondary.text-white.rounded-pill.ms-1(v-if="roomMembers.length > 5" style="font-size: 10px;") +{{ roomMembers.length - 5 }}
              i.fas(:class="showMembersDrawer ? 'fa-chevron-up' : 'fa-chevron-down'").text-muted
          
          // 房間成員內容（可展開收起）
          .collapse(:class="{ show: showMembersDrawer }")
            .p-3
              .row.g-2(v-if="roomMembers.length > 0")
                .col(v-for="member in roomMembers" :key="member.id" style="flex: 0 0 12.5%; max-width: 12.5%;")
                  .card.border.shadow-sm.h-100(:class="member.isCaptain ? 'border-warning bg-warning bg-opacity-10' : 'border-primary bg-light'")
                    .card-body.text-center.p-2
                      .avatar.mb-1
                        .rounded-circle.d-inline-flex.align-items-center.justify-content-center(:class="member.isCaptain ? 'bg-warning text-dark' : 'bg-primary text-white'" style="width: 32px; height: 32px; font-size: 12px;")
                          i.fas.fa-crown(v-if="member.isCaptain")
                          i.fas.fa-user(v-else)
                      .small.fw-bold.text-dark.text-truncate(style="min-height: 1em; font-size: 11px;") {{ member.name }}
                      .badge.mt-1(:class="member.isCaptain ? 'bg-warning text-dark' : 'bg-primary text-white'" style="font-size: 9px;") {{ member.isCaptain ? '隊長' : '隊員' }}
              
              .text-center.text-muted.py-3(v-if="roomMembers.length === 0")
                i.fas.fa-users.fa-lg.mb-2.d-block.opacity-50
                small 房間內暫無成員

      // Toast 通知容器
      .toast-container.position-fixed.bottom-0.end-0.p-3(style="z-index: 1055;")
        .toast.fade.show(
          v-for="(toast, index) in toasts" 
          :key="toast.id"
          :class="getToastClass(toast.type)"
          role="alert"
        )
          .toast-header
            .rounded.me-2(:class="getToastIconBg(toast.type)" style="width: 20px; height: 20px;")
              i.fas(:class="getToastIcon(toast.type)" style="font-size: 10px;")
            strong.me-auto {{ getToastTitle(toast.type) }}
            small {{ toast.time }}
            button.btn-close(@click="removeToast(index)" type="button")
          .toast-body {{ toast.message }}
      .row.g-3
        // 1. 預設人員名單
        .col-lg-2.col-md-3.col-sm-6(v-if="currentRoomId")
          .card.h-100
            .card-header.bg-primary.text-white.text-center
              h5.mb-0 預設人員名單
              small.d-block(v-if="!isCaptain") (僅隊長可操作)
            .card-body.d-flex.flex-column
              .mb-2(v-for="p in availablePlayers" :key="p.name")
                button.btn.btn-outline-secondary.btn-sm.w-100(:disabled="!isCaptain" @click="addToTeam(p.name)")
                  | {{ p.name }}
              .mt-auto
                .input-group.input-group-sm.mb-2
                  input.form-control(v-model="newPlayer" type="text" placeholder="手動加入隊伍" :disabled="!isCaptain")
                button.btn.btn-success.btn-sm.w-100(:disabled="!isCaptain" @click="addToTeam(newPlayer)") 加入隊伍

        // 2. 隊伍欄位
        .col-lg-2.col-md-3.col-sm-6(v-if="currentRoomId")
          .card.h-100
            .card-header.bg-info.text-white.text-center
              h5.mb-0 隊伍欄位 (最多8人)
              small.d-block(v-if="!isCaptain") (僅隊長可操作)
            .card-body
              .mb-2(v-for="p in team" :key="p.name")
                .d-flex.justify-content-between.align-items-center.p-2.bg-light.rounded
                  span {{ p.name }}
                  button.btn.btn-danger.btn-sm(:disabled="!isCaptain" @click="removeFromTeam(p.name)") ×
              p.text-muted.text-center.small(v-if="team.length === 0") 點擊左側人員加入隊伍或手動輸入

        // 3. 販賣設定
        .col-lg-2.col-md-3.col-sm-6(v-if="currentRoomId")
          .card.h-100
            .card-header.bg-warning.text-dark.text-center
              h5.mb-0 販賣設定
              small.d-block(v-if="!isCaptain") (僅隊長可操作)
            .card-body
              .mb-2(v-for="(sale, index) in salesConfig" :key="index")
                .d-flex.align-items-center.mb-1
                  select.form-select.form-select-sm.me-1(v-model="sale.from" :disabled="!isCaptain")
                    option(disabled value="") 賣方
                    option(v-for="p in team" :key="p.name" :disabled="isSellerUsed(p.name, index)") {{ p.name }}
                  span.mx-1 →
                  select.form-select.form-select-sm.me-1(v-model="sale.to" :disabled="!isCaptain")
                    option(disabled value="") 買方
                    option(v-for="p in team" :key="p.name + 'buy'" :disabled="p.name === sale.from") {{ p.name }}
                  button.btn.btn-danger.btn-sm(:disabled="!isCaptain" @click="removeSale(index)") ×
              button.btn.btn-success.btn-sm.w-100(:disabled="!isCaptain" @click="addSale") 新增販賣

        // 4. 分配珠子
        .col-lg-2.col-md-3.col-sm-6(v-if="currentRoomId")
          .card.h-100
            .card-header.bg-secondary.text-white.text-center
              h5.mb-0 分配珠子
              small.d-block(v-if="!isCaptain") (僅隊長可操作)
            .card-body.d-flex.flex-column
              input.form-control.form-control-sm.mb-2(v-model.number="roundBeads" type="number" placeholder="輸入珠子數量" :disabled="!isCaptain")
              button.btn.btn-primary.btn-sm.w-100.mb-2(:disabled="!isCaptain" @click="distributeBeads") 分配珠子
              button.btn.btn-warning.btn-sm.w-100.mb-2(:disabled="!isCaptain" @click="finalDistribute") 最後一回合
              button.btn.btn-secondary.btn-sm.w-100.mb-2(:disabled="!isCaptain" @click="undoLastRound") 返回上一步
              button.btn.btn-success.btn-sm.w-100.mt-auto(v-if="hasFinalRound" @click="downloadReport")
                i.fas.fa-download.me-1
                | 下載紀錄

        // 5. 回合紀錄
        .col-lg-2.col-md-6.col-12(v-if="currentRoomId")
          .card.h-100
            .card-header.bg-dark.text-white.text-center
              h5.mb-0 回合紀錄
            .card-body(style="max-height: 500px; overflow-y: auto;")
              .mb-3(v-for="(round, i) in reversedRounds" :key="i")
                .fw-bold.text-primary.mb-1
                  | === 回合 {{ rounds.length - i }} 珠子 {{ round.beads }}{{ round.isFinal ? ' End' : '' }} ===
                ol.small
                  li(v-for="entry in round.distribution" :key="entry.name + entry.note")
                    | {{ entry.name }} {{ entry.note }}

        // 6. 總珠子數
        .col-lg-2.col-md-6.col-12(v-if="currentRoomId")
          .card.h-100
            .card-header.bg-success.text-white.text-center
              h5.mb-0 總珠子數
            .card-body
              p.fw-bold 總珠子數：{{ totalBeads }}
              p.fw-bold(v-if="randomBeads > 0") 隨機：{{ randomBeads }}
              
              h6.mt-3 隊伍成員
              ul.list-unstyled.small
                li(v-for="p in team" :key="p.name")
                  | {{ p.name }} {{ p.beads }} 組
              
              h6.mt-3(v-if="sales.length > 0") 販賣紀錄
              ul.list-unstyled.small(v-if="sales.length > 0")
                li(v-for="s in sales" :key="s.from + s.to")
                  | {{ s.from }} → {{ s.to }} {{ s.count }} 組

  style.
    .cursor-pointer {
      cursor: pointer;
    }
    
    .cursor-pointer:hover {
      background-color: rgba(0, 0, 0, 0.05) !important;
    }
    
    .collapse {
      transition: height 0.35s ease;
    }
    
    /* 成員卡片響應式調整 */
    @media (max-width: 768px) {
      .col[style*="12.5%"] {
        flex: 0 0 25% !important;
        max-width: 25% !important;
      }
    }
    
    @media (max-width: 576px) {
      .col[style*="12.5%"] {
        flex: 0 0 50% !important;
        max-width: 50% !important;
      }
    }

  script(src="https://unpkg.com/vue@3/dist/vue.global.js")
  script.
    const { createApp, ref, computed } = Vue;
    
    createApp({
      setup() {
        // WebSocket 和房間管理
        const ws = ref(null);
        const currentRoomId = ref('');
        const joinRoomId = ref('');
        const playerName = ref('');
        const isCaptain = ref(false);
        const roomMembers = ref([]);
        const toasts = ref([]);
        const showMembersDrawer = ref(false);
        let toastId = 0;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 5;
        let reconnectTimeout = null;

        const availablePlayers = ref([
          { name: '86' },
          { name: '方哥' },
          { name: '尹月' },
          { name: '冰龍' },
          { name: '爆肝' },
          { name: '小不點寶寶' },
          { name: '大D' },
          { name: '小艾' },
        ]);

        const team = ref([]);
        const newPlayer = ref('');
        const roundBeads = ref(0);
        const rounds = ref([]);
        const history = ref([]);
        const salesConfig = ref([]);
        const sales = ref([]);
        const salesHistory = ref([]);
        const lastIndex = ref(0);
        const lastIndexHistory = ref([]);
        const randomBeads = ref(0);
        
        const totalBeads = computed(() => team.value.reduce((sum, p) => sum + (p.beads || 0), 0));
        const hasFinalRound = computed(() => rounds.value.some(r => r.isFinal));
        const reversedRounds = computed(() => [...rounds.value].reverse());

        // WebSocket 初始化
        function initWebSocket() {
          return new Promise((resolve, reject) => {
            // 動態生成 WebSocket URL
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const host = window.location.host;
            const wsUrl = `${protocol}//${host}`;
            
            console.log('連接 WebSocket:', wsUrl);
            ws.value = new WebSocket(wsUrl);
            
            ws.value.onopen = function() {
              console.log('WebSocket 連接已建立');
              resolve(ws.value);
            };
            
            ws.value.onmessage = function(event) {
              const data = JSON.parse(event.data);
              handleWebSocketMessage(data);
            };
            
            ws.value.onclose = function(event) {
              console.log('WebSocket 連接已關閉', event);
              
              // 如果是正常關閉或者已經達到最大重試次數，不重連
              if (event.wasClean || reconnectAttempts >= maxReconnectAttempts) {
                showStatus('連接已斷開', 'danger');
                currentRoomId.value = '';
                reconnectAttempts = 0;
                return;
              }
              
              // 嘗試重新連接
              reconnectAttempts++;
              const delay = Math.min(1000 * Math.pow(2, reconnectAttempts), 30000); // 指數退避，最大30秒
              
              showNotification(`連接斷開，${delay/1000}秒後重試 (${reconnectAttempts}/${maxReconnectAttempts})`, 'warning');
              
              reconnectTimeout = setTimeout(() => {
                if (currentRoomId.value) {
                  console.log(`嘗試重新連接 (${reconnectAttempts}/${maxReconnectAttempts})`);
                  initWebSocket().then(() => {
                    // 重連成功後重新加入房間
                    if (currentRoomId.value) {
                      const message = {
                        type: 'join_beads_room',
                        roomId: currentRoomId.value,
                        playerName: playerName.value
                      };
                      ws.value.send(JSON.stringify(message));
                    }
                    reconnectAttempts = 0; // 重置重試計數
                  }).catch(error => {
                    console.error('重連失敗:', error);
                  });
                }
              }, delay);
            };
            
            ws.value.onerror = function(error) {
              console.error('WebSocket 錯誤:', error);
              showStatus('無法連接到伺服器', 'danger');
              reject(error);
            };
          });
        }

        // 處理 WebSocket 訊息
        function handleWebSocketMessage(data) {
          switch(data.type) {
            case 'beads_room_created':
              currentRoomId.value = data.roomId;
              isCaptain.value = data.isCaptain;
              roomMembers.value = data.roomMembers || [];
              showNotification(`房間已創建，序號: ${data.roomId}`, 'success', true);
              break;
              
            case 'beads_room_joined':
              currentRoomId.value = data.roomId;
              isCaptain.value = data.isCaptain;
              roomMembers.value = data.roomMembers || [];
              loadGameState(data.gameState);
              showNotification(`已加入房間: ${data.roomId}`, 'success', true);
              break;
              
            case 'game_state_updated':
              loadGameState(data.gameState);
              break;
              
            case 'room_members_updated':
              roomMembers.value = data.roomMembers || [];
              break;
              
            case 'user_joined_beads':
              showNotification(`${data.playerName} 加入了房間`, 'info', true);
              break;
              
            case 'user_left_beads':
              showNotification(`${data.playerName} 離開了房間`, 'warning', true);
              break;
              
            case 'promoted_to_captain':
              isCaptain.value = true;
              showNotification(data.message, 'success', true);
              break;
              
            case 'error':
              showStatus(data.message, 'danger');
              break;
          }
        }

        // 載入遊戲狀態
        function loadGameState(gameState) {
          team.value = gameState.team || [];
          rounds.value = gameState.rounds || [];
          sales.value = gameState.sales || [];
          salesConfig.value = gameState.salesConfig || [];
          randomBeads.value = gameState.randomBeads || 0;
          lastIndex.value = gameState.lastIndex || 0;
        }

        // 同步遊戲狀態
        function syncGameState() {
          if (ws.value && ws.value.readyState === WebSocket.OPEN && isCaptain.value) {
            ws.value.send(JSON.stringify({
              type: 'update_game_state',
              gameState: {
                team: team.value,
                rounds: rounds.value,
                sales: sales.value,
                salesConfig: salesConfig.value,
                randomBeads: randomBeads.value,
                lastIndex: lastIndex.value
              }
            }));
          }
        }

        // 通知系統
        function showNotification(message, type = 'info', useNativeNotification = false) {
          // 如果是重要通知且支援原生通知，使用原生通知
          if (useNativeNotification && 'Notification' in window) {
            if (Notification.permission === 'granted') {
              new Notification('珠子分配系統', {
                body: message,
                icon: '/favicon.ico',
                tag: 'beads-notification'
              });
            } else if (Notification.permission !== 'denied') {
              Notification.requestPermission().then(permission => {
                if (permission === 'granted') {
                  new Notification('珠子分配系統', {
                    body: message,
                    icon: '/favicon.ico',
                    tag: 'beads-notification'
                  });
                }
              });
            }
          }
          
          // 同時顯示 Toast 通知
          showToast(message, type);
        }

        function showToast(message, type = 'info') {
          const toast = {
            id: ++toastId,
            message: message,
            type: type,
            time: new Date().toLocaleTimeString('zh-TW', { 
              hour: '2-digit', 
              minute: '2-digit' 
            })
          };
          
          toasts.value.push(toast);
          
          // 自動移除 Toast (成功和資訊 3秒，警告 5秒，錯誤 7秒)
          const duration = type === 'danger' ? 7000 : type === 'warning' ? 5000 : 3000;
          setTimeout(() => {
            removeToast(toasts.value.findIndex(t => t.id === toast.id));
          }, duration);
        }

        function removeToast(index) {
          if (index >= 0 && index < toasts.value.length) {
            toasts.value.splice(index, 1);
          }
        }

        // Toast 樣式函數
        function getToastClass(type) {
          const classes = {
            success: 'border-success',
            danger: 'border-danger',
            warning: 'border-warning',
            info: 'border-info'
          };
          return classes[type] || classes.info;
        }

        function getToastIconBg(type) {
          const classes = {
            success: 'bg-success',
            danger: 'bg-danger',
            warning: 'bg-warning',
            info: 'bg-info'
          };
          return classes[type] || classes.info;
        }

        function getToastIcon(type) {
          const icons = {
            success: 'fa-check text-white',
            danger: 'fa-exclamation-triangle text-white',
            warning: 'fa-exclamation-circle text-white',
            info: 'fa-info-circle text-white'
          };
          return icons[type] || icons.info;
        }

        function getToastTitle(type) {
          const titles = {
            success: '成功',
            danger: '錯誤',
            warning: '警告',
            info: '資訊'
          };
          return titles[type] || titles.info;
        }

        // 為了向後兼容，保留 showStatus 函數
        function showStatus(message, type) {
          showNotification(message, type);
        }

        // 房間管理功能
        async function createRoom() {
          const name = playerName.value.trim();
          if (!name) {
            showStatus('請輸入你的遊戲名稱', 'warning');
            return;
          }
          
          try {
            if (!ws.value || ws.value.readyState !== WebSocket.OPEN) {
              await initWebSocket();
            }
            ws.value.send(JSON.stringify({ 
              type: 'create_beads_room',
              playerName: name
            }));
          } catch (error) {
            console.error('創建房間失敗:', error);
            showStatus('創建房間失敗', 'danger');
          }
        }

        async function joinRoom() {
          const roomId = joinRoomId.value.trim().toUpperCase();
          const name = playerName.value.trim();
          
          if (!name) {
            showStatus('請輸入你的遊戲名稱', 'warning');
            return;
          }
          
          if (!roomId) {
            showStatus('請輸入房間序號', 'warning');
            return;
          }
          
          try {
            if (!ws.value || ws.value.readyState !== WebSocket.OPEN) {
              await initWebSocket();
            }
            ws.value.send(JSON.stringify({ 
              type: 'join_beads_room', 
              roomId: roomId,
              playerName: name
            }));
          } catch (error) {
            console.error('加入房間失敗:', error);
            showStatus('加入房間失敗', 'danger');
          }
        }

        function leaveRoom() {
          // 清理重連定時器
          if (reconnectTimeout) {
            clearTimeout(reconnectTimeout);
            reconnectTimeout = null;
          }
          reconnectAttempts = 0;
          
          if (ws.value) {
            ws.value.close(1000, '用戶主動離開'); // 正常關閉
          }
          currentRoomId.value = '';
          isCaptain.value = false;
          roomMembers.value = [];
          // 重置遊戲狀態
          team.value = [];
          rounds.value = [];
          sales.value = [];
          salesConfig.value = [];
          randomBeads.value = 0;
          lastIndex.value = 0;
          showStatus('已離開房間', 'info');
        }

        function copyRoomId() {
          navigator.clipboard.writeText(currentRoomId.value).then(() => {
            showNotification(`房間序號 ${currentRoomId.value} 已複製到剪貼板`, 'success', true);
          }).catch(err => {
            console.error('複製失敗:', err);
            showNotification('複製失敗，請手動複製房間序號', 'danger');
          });
        }

        // 切換成員抽屜
        function toggleMembersDrawer() {
          showMembersDrawer.value = !showMembersDrawer.value;
        }

        function addToTeam(name) {
          if (!isCaptain.value) return;
          if (!name) return;
          if (team.value.length >= 8) return alert('隊伍最多 8 人');
          if (team.value.find(p => p.name === name)) return;
          team.value.push({ name, beads: 0 });
          newPlayer.value = '';
          syncGameState();
        }

        function removeFromTeam(name) {
          if (!isCaptain.value) return;
          const idx = team.value.findIndex(p => p.name === name);
          if (idx !== -1) team.value.splice(idx, 1);
          syncGameState();
        }

        function addSale() {
          if (!isCaptain.value) return;
          salesConfig.value.push({ from: '', to: '' });
          syncGameState();
        }

        function removeSale(index) {
          if (!isCaptain.value) return;
          salesConfig.value.splice(index, 1);
          syncGameState();
        }

        function isSellerUsed(name, currentIndex) {
          return salesConfig.value.some((sale, idx) => idx !== currentIndex && sale.from === name);
        }

        function distributeRound(beadCount, isFinal = false) {
          const n = team.value.length;
          if (!beadCount || n === 0) return;
          team.value.forEach(p => {
            if (p.beads === undefined) p.beads = 0;
          });

          const result = [];
          let remaining = beadCount;
          let idx = rounds.value.length === 0 ? 0 : (lastIndex.value + 1) % n;
          const baseOrder = [];

          for (let i = 0; i < n; i++) baseOrder.push(team.value[(idx + i) % n]);

          history.value.push(JSON.parse(JSON.stringify(team.value)));
          salesHistory.value.push(JSON.parse(JSON.stringify(sales.value)));
          lastIndexHistory.value.push(lastIndex.value);

          if (isFinal) {
            const peopleUntilFirstPerson = idx === 0 ? n : n - idx;

            if (beadCount <= peopleUntilFirstPerson) {
              if (beadCount < peopleUntilFirstPerson) {
                const whoWillBeInThisRound = [];
                for (let i = 0; i < peopleUntilFirstPerson; i++) {
                  whoWillBeInThisRound.push(baseOrder[i].name);
                }

                for (let i = 0; i < beadCount; i++) {
                  result.push({ name: whoWillBeInThisRound.join(' '), note: '搶' });
                }
                randomBeads.value = beadCount;
              } else {
                for (let i = 0; i < beadCount; i++) {
                  const player = baseOrder[i];
                  const sale = salesConfig.value.find(s => s.from === player.name);
                  if (sale && sale.to) {
                    const buyer = team.value.find(p => p.name === sale.to);
                    if (buyer) {
                      buyer.beads++;
                      let s = sales.value.find(
                        x => x.from === player.name && x.to === buyer.name,
                      );
                      if (!s)
                        sales.value.push({
                          from: player.name,
                          to: buyer.name,
                          count: 1,
                        });
                      else s.count++;
                      result.push({ name: buyer.name, note: `${player.name}賣` });
                    }
                  } else {
                    player.beads++;
                    result.push({ name: player.name, note: '' });
                  }
                }
              }
            } else {
              for (let i = 0; i < peopleUntilFirstPerson; i++) {
                const player = baseOrder[i];
                const sale = salesConfig.value.find(s => s.from === player.name);
                if (sale && sale.to) {
                  const buyer = team.value.find(p => p.name === sale.to);
                  if (buyer) {
                    buyer.beads++;
                    let s = sales.value.find(x => x.from === player.name && x.to === buyer.name);
                    if (!s)
                      sales.value.push({
                        from: player.name,
                        to: buyer.name,
                        count: 1,
                      });
                    else s.count++;
                    result.push({ name: buyer.name, note: `${player.name}賣` });
                  }
                } else {
                  player.beads++;
                  result.push({ name: player.name, note: '' });
                }
              }

              const remainingBeads = beadCount - peopleUntilFirstPerson;
              const allNames = team.value.map(p => p.name).join(' ');
              for (let i = 0; i < remainingBeads; i++) {
                result.push({ name: allNames, note: '搶' });
              }
              randomBeads.value = remainingBeads;
            }

            lastIndex.value = 0;
          } else {
            while (remaining > 0) {
              const player = baseOrder[0];
              baseOrder.push(baseOrder.shift());
              remaining--;

              const sale = salesConfig.value.find(s => s.from === player.name);
              if (sale && sale.to) {
                const buyer = team.value.find(p => p.name === sale.to);
                if (buyer) {
                  buyer.beads++;
                  let s = sales.value.find(x => x.from === player.name && x.to === buyer.name);
                  if (!s) sales.value.push({ from: player.name, to: buyer.name, count: 1 });
                  else s.count++;
                  result.push({ name: buyer.name, note: `${player.name}賣` });
                } else {
                  player.beads++;
                  result.push({ name: player.name, note: '' });
                }
              } else {
                player.beads++;
                result.push({ name: player.name, note: '' });
              }
            }
            lastIndex.value = (idx + beadCount - 1) % n;
          }

          rounds.value.push({ beads: beadCount, distribution: result, isFinal });
          roundBeads.value = 0;
        }

        function distributeBeads() {
          if (!isCaptain.value) return;
          distributeRound(roundBeads.value);
          syncGameState();
        }

        function finalDistribute() {
          if (!isCaptain.value) return;
          distributeRound(roundBeads.value, true);
          syncGameState();
        }

        function undoLastRound() {
          if (!isCaptain.value) return;
          if (rounds.value.length === 0) return;
          const lastRound = rounds.value[rounds.value.length - 1];

          if (history.value.length === 0) return;
          const lastState = history.value.pop();
          const lastSalesState = salesHistory.value.pop();
          const lastIndexState = lastIndexHistory.value.pop();

          team.value = lastState.map(p => ({ ...p }));
          sales.value = lastSalesState.map(s => ({ ...s }));
          lastIndex.value = lastIndexState;
          rounds.value.pop();

          if (lastRound.isFinal) {
            randomBeads.value = 0;
          }
          syncGameState();
        }

        function downloadReport() {
          let content = '='.repeat(50) + '\n';
          content += '珠子分配紀錄\n';
          content += '='.repeat(50) + '\n\n';

          // 回合紀錄
          content += '【回合紀錄】\n\n';
          rounds.value.forEach((round, i) => {
            content += `=== 回合 ${i + 1} 珠子 ${round.beads}${round.isFinal ? ' End' : ''} ===\n`;
            round.distribution.forEach((entry, idx) => {
              content += `${idx + 1}. ${entry.name} ${entry.note}\n`;
            });
            content += '\n';
          });

          // 總珠子數
          content += '='.repeat(50) + '\n';
          content += '【總珠子數】\n\n';
          content += `總珠子數：${totalBeads.value}\n`;
          if (randomBeads.value > 0) {
            content += `隨機：${randomBeads.value}\n`;
          }
          content += '\n';
          team.value.forEach(p => {
            content += `${p.name} ${p.beads} 組\n`;
          });

          // 販賣紀錄
          if (sales.value.length > 0) {
            content += '\n' + '='.repeat(50) + '\n';
            content += '【販賣紀錄】\n\n';
            sales.value.forEach(s => {
              content += `${s.from} → ${s.to} ${s.count} 組\n`;
            });
          }

          content += '\n' + '='.repeat(50) + '\n';
          content += `生成時間：${new Date().toLocaleString('zh-TW')}\n`;

          // 創建下載
          const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
          const url = URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.download = `珠子分配紀錄_${new Date().getTime()}.txt`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(url);
        }

        return {
          // WebSocket 和房間管理
          currentRoomId,
          joinRoomId,
          playerName,
          isCaptain,
          roomMembers,
          showMembersDrawer,
          toasts,
          createRoom,
          joinRoom,
          leaveRoom,
          copyRoomId,
          toggleMembersDrawer,
          
          // 通知系統
          showNotification,
          showToast,
          removeToast,
          getToastClass,
          getToastIconBg,
          getToastIcon,
          getToastTitle,
          
          // 遊戲數據
          availablePlayers,
          team,
          newPlayer,
          roundBeads,
          rounds,
          salesConfig,
          sales,
          randomBeads,
          totalBeads,
          hasFinalRound,
          reversedRounds,
          
          // 遊戲操作
          addToTeam,
          removeFromTeam,
          addSale,
          removeSale,
          isSellerUsed,
          distributeBeads,
          finalDistribute,
          undoLastRound,
          downloadReport
        };
      }
    }).mount('#app');
